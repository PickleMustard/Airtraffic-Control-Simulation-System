[1mdiff --cc README.md[m
[1mindex e8183c0,b4a778f..0000000[m
[1m--- a/README.md[m
[1m+++ b/README.md[m
[36m@@@ -1,20 -1,6 +1,23 @@@[m
  # Airtraffic-Control-Simulation-System[m
[32m +[m
  The system for our CS 3354 Systems Engineering Course[m
  [m
[32m++<<<<<<< HEAD[m
[32m +<<<<<<< HEAD[m
[32m +=======[m
[32m +## Project Structure[m
[32m +[m
[32m +.kv files are "kivy" files, a file type specific to our front-end implementation[m
[32m +[m
[32m +- main.py - *Contains the app definition, loads main.kv and Screens.py*[m
[32m +- main.kv  - *Loads individual screens and sets up window manager*[m
[32m +- Screens.py - *Contains class defintions for screens*[m
[32m +- Screens - *Contains .kv files that contain kivy widget defintions. Each file corresponds to a class in Screens.py*[m
[32m +  - ...[m
[32m +[m
[32m +>>>>>>> a94f89242ea14abd82b71faf5868975c6dfe958f[m
[32m++=======[m
[32m++>>>>>>> feature[m
  ## Setup[m
  1. Clone git repo:[m
     > git clone https://github.com/PickleMustard/Airtraffic-Control-Simulation-System.git[m
[1mdiff --cc Screens.py[m
[1mindex 360fbf1,1926e10..0000000[m
[1m--- a/Screens.py[m
[1m+++ b/Screens.py[m
[36m@@@ -1,4 -1,3 +1,7 @@@[m
[32m +<<<<<<< HEAD[m
[32m++<<<<<<< HEAD[m
[32m++=======[m
[32m++>>>>>>> feature[m
  from kivy.uix.screenmanager import ScreenManager, Screen[m
  [m
  class WindowManager(ScreenManager):[m
[36m@@@ -9,165 -8,4 +12,169 @@@[m [mclass LoginWindow(Screen)[m
          print("TEST FUNCTION")[m
  [m
  class MainMenuWindow(Screen):[m
[31m -    pass[m
[32m++<<<<<<< HEAD[m
[32m +    pass[m
[32m +=======[m
[32m +# Screens.py[m
[32m +# Description:[m
[32m +#   Contains the definitions for classes for the associated widgets in every screen[m
[32m +#   This file will be split into files for each screen in the future[m
[32m +[m
[32m +from kivy.uix.screenmanager import ScreenManager, Screen[m
[32m +from kivy.uix.boxlayout import BoxLayout[m
[32m +from kivy.clock import Clock[m
[32m +from kivy.app import App[m
[32m +from kivy.lang import Builder[m
[32m +from kivy.uix.recycleview.views import RecycleDataViewBehavior[m
[32m +from kivy.uix.label import Label[m
[32m +from kivy.properties import NumericProperty[m
[32m +from kivy.properties import StringProperty[m
[32m +from kivy.animation import Animation[m
[32m +from kivy.uix.widget import Widget[m
[32m +from kivy.uix.floatlayout import FloatLayout[m
[32m +[m
[32m +# Class for WindowManager controller[m
[32m +class WindowManager(ScreenManager):[m
[32m +    pass[m
[32m +[m
[32m +# Class for LoginWindow root widget[m
[32m +class LoginWindow(Screen):[m
[32m +    pass[m
[32m +[m
[32m +# Class for MainMenuWindow root widget[m
[32m +class MainMenuWindow(Screen):[m
[32m +    pass[m
[32m +[m
[32m +# TODO: Remove these two imports once PlaneInfoList.populate is implemented[m
[32m +from random import sample, randint[m
[32m +from string import ascii_lowercase[m
[32m +[m
[32m +# Class for PlaneInfoWindow root widget[m
[32m +class PlaneInfoWindow(Screen):[m
[32m +    pass[m
[32m +[m
[32m +# Class for a row in the table of plane information in PlaneInfo Screen[m
[32m +class PlaneInfoRow(RecycleDataViewBehavior,BoxLayout):[m
[32m +    dataName = StringProperty()[m
[32m +    dataValue = StringProperty()[m
[32m +    def __init__(self, **kwargs):[m
[32m +        super(PlaneInfoRow, self).__init__(**kwargs)[m
[32m +[m
[32m +# Class for the list of plane information in PlaneInfo Screen[m
[32m +#   Autopopulates on the first clock[m
[32m +class PlaneInfoList(BoxLayout):[m
[32m +    def __init__(self, **kwargs):[m
[32m +        super(PlaneInfoList, self).__init__(**kwargs)[m
[32m +        Clock.schedule_once(self.finish_init,0)[m
[32m +[m
[32m +    # Autopopulate list of plane info[m
[32m +    def finish_init(self, dt):[m
[32m +        self.populate()[m
[32m +[m
[32m +    # TODO: Write query for populating list of plane info[m
[32m +    # Populate list of plane info from database[m
[32m +    def populate(self):[m
[32m +        print("Populating")[m
[32m +        self.rv.data = [[m
[32m +            {'dataName': ''.join(sample(ascii_lowercase, 6)),[m
[32m +             'dataValue': str(randint(0, 2000))}[m
[32m +            for x in range(50)][m
[32m +[m
[32m +    # Sort the list plane info[m
[32m +    def sort(self):[m
[32m +        self.rv.data = sorted(self.rv.data, key=lambda x: x['name.text'])[m
[32m +[m
[32m +    # Clear the list of plane info[m
[32m +    def clear(self):[m
[32m +        self.rv.data = [][m
[32m +[m
[32m +    # Update list of plane info[m
[32m +    def update(self, value):[m
[32m +        if self.rv.data:[m
[32m +            self.rv.data[0]['name.text'] = value or 'default new value'[m
[32m +            self.rv.refresh_from_data()[m
[32m +[m
[32m +# Class for ScheduleWindow root widget[m
[32m +class ScheduleWindow(Screen):[m
[32m +    pass[m
[32m +[m
[32m +# Class for a row of ArrivalList, the list of arriving planes[m
[32m +class ArrivalRow(RecycleDataViewBehavior,BoxLayout):[m
[32m +    planeName = StringProperty()[m
[32m +    planeArrivalTime = StringProperty()[m
[32m +    def __init__(self, **kwargs):[m
[32m +        super(ArrivalRow, self).__init__(**kwargs)[m
[32m +[m
[32m +# Class for a row of DepartureList, the list of departing planes[m
[32m +class DepartureRow(RecycleDataViewBehavior,BoxLayout):[m
[32m +    planeName = StringProperty()[m
[32m +    planeDepartureTime = StringProperty()[m
[32m +    def __init__(self, **kwargs):[m
[32m +        super(DepartureRow, self).__init__(**kwargs)[m
[32m +[m
[32m +#https://github.com/kivy/kivy/issues/6582[m
[32m +# Class for the list or arriving planes[m
[32m +class ArrivalList(BoxLayout):[m
[32m +    def __init__(self, **kwargs):[m
[32m +        super(ArrivalList, self).__init__(**kwargs)[m
[32m +        Clock.schedule_once(self.finish_init,0)[m
[32m +[m
[32m +    # Autopopulate list of arrivals[m
[32m +    def finish_init(self, dt):[m
[32m +        self.populate()[m
[32m +[m
[32m +    # TODO:  Write query for populating list of arrivals[m
[32m +    # Populate list of arrivals[m
[32m +    def populate(self):[m
[32m +        self.rv.data = [[m
[32m +            {'planeName': ''.join(sample(ascii_lowercase, 6)),[m
[32m +             'planeArrivalTime': str(randint(0, 2000))}[m
[32m +            for x in range(50)][m
[32m +[m
[32m +# Class for the list of departing planes[m
[32m +class DepartureList(BoxLayout):[m
[32m +    def __init__(self, **kwargs):[m
[32m +        super(DepartureList, self).__init__(**kwargs)[m
[32m +        Clock.schedule_once(self.finish_init,0)[m
[32m +[m
[32m +    # Autopopulate list of departures[m
[32m +    def finish_init(self, dt):[m
[32m +        self.populate()[m
[32m +[m
[32m +    # TODO: Write query for populating list of departures[m
[32m +    # Populate list of departures[m
[32m +    def populate(self):[m
[32m +        self.rv.data = [[m
[32m +            {'planeName': ''.join(sample(ascii_lowercase, 6)),[m
[32m +             'planeDepartureTime': str(randint(0, 2000))}[m
[32m +            for x in range(50)][m
[32m +[m
[32m +# Class representing a worker in the simulation of the ground crew simulation[m
[32m +class SimulatedWorker(Widget):[m
[32m +    def __init__(self, **kwargs):[m
[32m +        super(SimulatedWorker, self).__init__(**kwargs)[m
[32m +[m
[32m +# Class for the TerminalSimulationWindow root widget[m
[32m +class TerminalSimulationWindow(Screen):[m
[32m +[m
[32m +    def animationTestt(self, widget, **kwargs):[m
[32m +        anim = Animation(x=0, y=0)[m
[32m +        anim.start(self.ids.otherExample)[m
[32m +        print (self.ids.otherExample.height)[m
[32m +        print (self.ids.otherExample.width)[m
[32m +        print(str(self.height) + " " + str(self.width))[m
[32m +[m
[32m +[m
[32m +    def animationTest(self, widget, **kwargs):[m
[32m +        anim = Animation(x=1200, y=980